include_directories( . linux )
link_libraries(simdjson simdjson-flags simdjson-windows-headers test-data)
add_executable(benchfeatures benchfeatures.cpp)
add_executable(get_corpus_benchmark get_corpus_benchmark.cpp)
add_executable(perfdiff perfdiff.cpp)
add_executable(parse parse.cpp)
add_executable(parse_stream parse_stream.cpp)
add_executable(statisticalmodel statisticalmodel.cpp)

add_executable(parse_noutf8validation parse.cpp)
target_compile_definitions(parse_noutf8validation PRIVATE SIMDJSON_SKIPUTF8VALIDATION)
add_executable(parse_nonumberparsing parse.cpp)
target_compile_definitions(parse_nonumberparsing PRIVATE SIMDJSON_SKIPNUMBERPARSING)
add_executable(parse_nostringparsing parse.cpp)
target_compile_definitions(parse_nostringparsing PRIVATE SIMDJSON_SKIPSTRINGPARSING)

if (SIMDJSON_GOOGLE_BENCHMARKS)
  link_libraries(benchmark::benchmark)
  add_executable(bench_parse_call bench_parse_call.cpp)
  add_executable(bench_dom_api bench_dom_api.cpp)
endif()

if (SIMDJSON_COMPETITION)
  add_executable(distinctuseridcompetition distinctuseridcompetition.cpp)
  target_link_libraries(distinctuseridcompetition competition-core)
  add_executable(minifiercompetition minifiercompetition.cpp)
  target_link_libraries(minifiercompetition competition-core)
  add_executable(parseandstatcompetition parseandstatcompetition.cpp)
  target_link_libraries(parseandstatcompetition competition-core)
  add_executable(parsingcompetition parsingcompetition.cpp)
  target_link_libraries(parsingcompetition competition-core)
  add_executable(allparsingcompetition parsingcompetition.cpp)
  target_link_libraries(allparsingcompetition competition-all)
  target_compile_definitions(allparsingcompetition PRIVATE ALLPARSER)
endif()

include(checkperf.cmake)
